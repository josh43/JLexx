/*
Make sure you have cd'd into the InstalDir and have done sudo ./install.sh
Than to compile an input like this one run
jlGen JLexxExample.txt

and to run the lexer on input just do
jlGen exInput.txt

*/

// From here all the way down tocan be any valid c/c++!!
#include <stdlib.h>
#include <string.h>

// put whatever you want
uint unique;
uint wordCount =0;
uint lineCount =0;
// insert very useful function ... :|
void helloWorld(){
 printf("Hello world");
}
/* TYPE must be called JVAL but the contents of the union can by whatever are accepted by c++*/
union JVAL {
    int y;
    char * text;
}jval;
/* instance must be called jval */

/*
    When matched this value will be filled
    struct {
        char * text;  // this will only be a pointer to the start of the match
        uint start;   // thus to get the text you want to substr(text,start,end)
        uint end;     // It is this way to allow more customization later on!
    }jmatch;

*/



// There will be a 256 offset because I want to allow returning of characters


// BEGIIN TOKENS without the second I is a keyword and is used to define enums to be returned
BEGIN TOKENS
    NUMB
BEGIN DEFINITIONS


     [\n\t ][a-zA-Z]+                              {
                                                    jval.text = strndup(jmatch.text,jmatch.end-jmatch.start);
                                                    printf("Matched %s\n",jval.text);
                                                    return jmatch.text[0];
                                                    } // not found
     [^\n]                                         {return jmatch.text[0];} // not found

BEGIN MAIN


int main(){




    matchSTDIN(true);
    // turns all debug flags on
    setVerbose(true);
    std::pair<JVAL,TokenType> next = jlnext();
    printf("About to read input");
    while(!endOfInput()){
        next = jlnext();
    }
    if(next.second != std::numeric_limits<uint>::max()){
    }

    return 0;

}